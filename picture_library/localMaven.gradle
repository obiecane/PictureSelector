def localRepoURL = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

apply plugin: 'maven-publish' //指定使用 maven

// 1. 增加上传源码的task
task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

publishing {
    // 配置maven 仓库
    repositories { RepositoryHandler handler ->
        handler.mavenLocal()  // 发布到默认的 本地maven 仓库 ，路径： USER_HOME/.m2/repository/

//        可以同时配置多个
//        handler.maven {
//            url "${rootDir}/repo"
//        }
//        // 仓库用户名密码
//        // handler.maven { MavenArtifactRepository mavenArtifactRepository ->
//        //     // maven 仓库地址
//        //     url 'http://10.0.192.56:8081/repository/core/'
//        //     // 访问仓库的 账号和密码
//        //     credentials {
//        //         username = "meiTest"
//        //         password = "123456"
//        //     }
//        // }
    }
    // 配置发布产物
    publications { PublicationContainer publication ->
        // 名称可以随便定义，这里定义成 maven，是因为我的 aar 包是发布到 maven 仓库的，所以这里为了见名知义，定义成了 maven
        // 任务名称：maven
        maven(MavenPublication) {// 容器可配置的信息 MavenPublication
            // 增加上传源码的 task
            artifact sourceJar
            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) } // 方式一：生成aar包
            // artifact "$buildDir/outputs/aar/${project.name}-release.aar" // 方式二：指定生成的aar路径
            groupId = "com.developcollect"
            artifactId = "PictureSelector"
            version = "1.0.0"

            // pom文件中声明依赖，从而传递到使用方
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                project.configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}



